import Navbar from "../navbar"
import Footer from "../footer"
import "./works2.css"
import WorksCard from "../component/worksCard"
import unidocs from "../Assets/unidocsport.webp"
import contentsumm from "../Assets/contentsumm.webp"
import cysdImg from "../Assets/cysdl.png"
import unidocs2 from "../Assets/unidocs2.png"
import unidocs3 from "../Assets/unidocs3.png"
import unidocs4 from "../Assets/uni1.png"
import unidocs5 from "../Assets/uni5.png"
import unidocs6 from "../Assets/uni6.png"
import unidocs7 from "../Assets/uni7.png"
import unidocs8 from "../Assets/uni8.png"
import animeProjectImg from "../Assets/p2.png"
import turtlezence from "../Assets/voice.webp"
import contsumm2 from "../Assets/contsumm2.png"
import contsumm3 from "../Assets/contsumm3.jpg"
import cysd2 from "../Assets/cysdcam2.png"
import cysd3 from "../Assets/cysdcam3.png"
import cysd4 from "../Assets/cysdcam4.png"
import cysd5 from "../Assets/cysdcam5.png"
import anime2 from "../Assets/anime2.png"
import anime3 from "../Assets/anime3.png"
import anime4 from "../Assets/anime4.png"
import zendest2 from "../Assets/zendest2.png"
import zendest3 from "../Assets/zendest3.png"
import zendest4 from "../Assets/zendest4.png"





export default function Works2(){
    return <div className="work2Container">
        <Navbar/>
        <section className="worksContainer">
            <WorksCard projectName={"UNIDOCS"} ProjectDescriptions={"UniDocs addresses the challenge of managing and sharing documents in a secure, organized, and scalable manner. To solve this, I engineered a full-featured document management platform with secure authentication, efficient file handling, and responsive search and retrieval functionality. The backend was architected to scale reliably under heavy usage, while the frontend delivers a clean, accessible interface for seamless user interaction. UniDocs provides a solid foundation for end users to manage high volumes of content with confidence and ease."} BackendDescription={"Developed robust backend services using Node.js and Express.js. Implemented middleware-driven request handling, JWT-based authentication for secure access control, and file handling with Multer for managing concurrent uploads efficiently. Each API route was designed to be modular and testable, ensuring consistent performance under load."} FrontendDecsription={"Built with React.js and styled using Tailwind CSS to ensure a responsive, clean, and accessible user interface. Users can seamlessly upload, preview, and manage documents through a dynamic interface, with feedback provided in real-time using controlled components and form states."} DbDescription={"Architected a relational schema in PostgreSQL with a focus on normalization and query efficiency. Indexed key fields based on query patterns to optimize document retrieval performance under multi-user access. Maintained clean data relationships for extensibility and integrity."} tools={["React","Node.js","Express","PostgreSQL","Docker","Tailwind","Redis","Nginx"]} projImage={unidocs4} Deployment={"Containerized the entire application stack using Docker for consistent environment parity across development and production. Configured Nginx as a reverse proxy and load balancer to manage traffic routing and improve availability. Integrated Redis for intelligent caching of frequently accessed documents and metadata, which reduced response latency and offloaded the database during peak usage. Also implemented Redis-backed rate limiting to guard against potential request flooding and ensure service reliability."} projImage2={unidocs5} projImage3={unidocs6} projImage4={unidocs7} siteLink={"https://unidocs-1.onrender.com/#/"} githubLink={"https://github.com/minokrim/contentSummarizer"}/>


            <WorksCard projectName={"Content Summarizer"} ProjectDescriptions={"Content Summarizer was designed to help users extract key insights from large volumes of content, from web articles, uploaded files, to PDFs. I built this full-stack system to automates the summarization process using AI and web scraping, allowing users to process data from multiple sources in seconds. The platform delivers high-accuracy summaries while maintaining a fast, responsive, and clean user experience across devices. It streamlines knowledge consumption for students, researchers, and professionals alike."} BackendDescription={"Developed a modular Express.js backend with strict controller-service separation, ensuring clean architecture, easy maintenance, and low coupling. Integrated Cheerio for secure web scraping of external URLs and configured endpoints to handle multi-format input (HTML, PDF, raw text). Implemented PDF summarization via the ILOVE-PDF API, using Multer to parse and extract structured text."} FrontendDecsription={"Built with React.js and TypeScript using a component-driven architecture. Leveraged Tailwind CSS for responsive, accessible design and maintained strong typing across the codebase to improve reliability and refactoring. Implemented controlled forms and real-time feedback mechanisms to create a seamless, intuitive summarization flow for users submitting links or uploading documents."} DbDescription={"Used Supabase (PostgreSQL) to store user-submitted data, document metadata, and summaries. The schema was designed to support multi-user access while enforcing row-level security for private content. Indexed key fields to optimize lookup times and enable near-instant summarization history retrieval."} Deployment={"Containerized all microservices with Docker, enabling consistent and reproducible environments across local development and production. Configured Nginx as a reverse proxy to route traffic between services and handle SSL termination. This setup reduced deployment complexity and improved request handling reliability across the application stack."} tools={["React", "Typescript", "Node.js", "Tailwind", "Supabase", "OpenAI", "Cheerio", "Docker", "Nginx"]}projImage={contentsumm} projImage2={contsumm2} projImage3={contsumm3} siteLink={"https://contentsummarizer-1.onrender.com/"} githubLink={"https://github.com/minokrim/contentSummarizer"}/>


            <WorksCard projectName={"CYSD - Center of Youth and Sustainable Development"} ProjectDescriptions={"The CYSD platform was designed to empower a non-profit organization in driving youth-focused and community-centered development by improving how they communicate impact, encourage donations, and engage stakeholders. I led the redesign and rebuild of the website to solve the challenge of poor digital engagement and donation drop-off. The solution involved a mobile-first, goal-oriented landing experience that highlights the organization's mission, impact stories, and initiatives while making donations frictionless. The platform serves as a central touchpoint for awareness, engagement, and fundraising, accessible across all devices."} BackendDescription={"Integrated Nodemailer to send personalized confirmation emails and thank-you messages to donors. Mailchimp was connected for audience segmentation and campaign tracking, improving engagement across different donor groups."} FrontendDecsription={"Developed a responsive and accessible frontend using React.js and Tailwind CSS, with WordPress used as a headless CMS to allow non-technical staff to manage dynamic content. The UI was designed with donor psychology in mind, emphasizing impact visuals, easy-to-scan content sections, and a clear call-to-action hierarchy that guides visitors toward donating or subscribing."}   DbDescription={"This project did not require a formal database; instead, data flows were handled through third-party APIs (PayPal, Mailchimp) and form submissions. All dynamic content was served from the WordPress CMS via REST APIs, enabling flexibility without adding database overhead."}   Deployment={"Deployed the platform on Hostinger, configuring the production build for performance and reliability. Set up custom domain routing, HTTPS support, and CMS integration. The deployment process was streamlined for ease of content updates and routine maintenance, with a clear separation between code and content."}  tools={["React", "Tailwind",,"Mailchimp", "PayPal API", "WordPress", "Nodemailer","Hostinger"]}projImage={cysdImg} projImage2={cysd2} projImage3={cysd3} projImage4={cysd4} siteLink={"https://cysdcam.org/#/"} githubLink={"https://github.com/minokrim/cysd"}/>


            <WorksCard projectName={"The Anime – Discover & Bookmark Anime"} ProjectDescriptions={"Anime Explorer was born from the challenge of helping anime fans easily explore and keep track of their favorite shows. Most anime sites are cluttered or slow, and few allow fans to save or revisit series easily. This project offers a sleek, fast, and responsive experience with bookmark functionality, intuitive navigation, and dynamic data powered by the Jikan API. Users can browse top titles, view detailed anime and character info, and curate their personal watchlist — all in one place."} BackendDescription={"This was a frontend-only project. No backend was needed — all data is fetched in real-time from the public Jikan API. Bookmark data is stored in the browser using `localStorage`, ensuring a seamless experience without requiring a database or authentication layer."} FrontendDecsription={"Built with React and styled using plain CSS and Bootstrap. React Router powers dynamic routing, while components like `Carousel`, `Search`, and `Bookmark Manager` offer interactive experiences. State is managed using `useState` and `useEffect`, and user interactions like bookmarking or searching are enhanced with `lodash.debounce` and `sweetalert2` modals."} DbDescription={"No database was used. Persistent state is maintained on the client side using `localStorage`, which allows users to save and revisit bookmarks even after refreshing the browser."} Deployment={"Deployed the project via GitHub Pages for free, fast, and global distribution. The build was configured using Create React App’s deployment setup, with custom domain linking and SEO optimization for improved visibility and accessibility."} tools={["React", "Bootstrap", "CSS",  "Jikan API", "GitHub Pages"]}projImage={animeProjectImg} projImage2={anime2} projImage3={anime3} projImage4={anime4} siteLink={"https://minokrim.github.io/animeproject"} githubLink={"https://github.com/minokrim/animeproject"}/>

            <WorksCard projectName={"TurtleZence"} ProjectDescriptions={"TurtleZence is a lightweight, community-driven story-sharing platform built to empower individuals to submit and explore stories from around the world. Focused on accessibility and storytelling, it provides an intuitive interface for sharing narratives and discovering editorial content. The platform leverages Firebase’s global Content Delivery Network (CDN) to ensure stories, images, and assets are served rapidly and reliably across regions, reducing latency and enhancing the storytelling experience for users regardless of location."} FrontendDecsription={"Built using React and Tailwind CSS with a responsive, mobile-first design approach. Integrated EmailJS to allow users to securely submit stories without a backend server. Carousels, custom dropdowns, and real-time form validation enhance the user experience. Sections like UBN and Editor’s Picks were implemented using dynamic local JSON and modular React components."} BackendDescription={"The platform was built entirely without a backend. All user interactions (e.g., story submission) were handled client-side via EmailJS. This architecture reduces complexity and eliminates backend deployment or maintenance concerns."} DbDescription={"TurtleZence does not use a traditional database. Static and structured data—such as editor content and featured stories—are managed through local JSON files and rendered dynamically using React components."} Deployment={"Deployed on Firebase Hosting, which provides fast, secure, and scalable delivery of frontend assets. Firebase’s built-in SSL and CDN ensured global accessibility and improved performance. The deployment pipeline was configured for seamless updates and zero-downtime rollouts."} tools={["React", "Tailwind", "EmailJS", "Firebase", "React Icons"]}projImage={turtlezence} projImage2={zendest2} projImage3={zendest3} projImage4={zendest4} githubLink={"https://github.com/minokrim/yuvoice"} siteLink={"https://zendest-52099.web.app/#/"}/>

        </section>
        <Footer/>
    </div>
}